{
  "name": "smooth-scroll",
  "version": "16.1.3",
  "description": "Animate scrolling to anchor links",
  "main": "./dist/smooth-scroll.polyfills.min.js",
  "author": {
    "name": "Chris Ferdinandi",
    "url": "http://gomakethings.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "http://github.com/cferdinandi/smooth-scroll"
  },
  "devDependencies": {
    "gulp": "4.0.0",
    "del": "3.0.0",
    "lazypipe": "1.0.1",
    "gulp-flatmap": "1.0.2",
    "gulp-header": "2.0.5",
    "gulp-rename": "1.4.0",
    "jshint": "2.9.6",
    "gulp-jshint": "2.1.0",
    "jshint-stylish": "2.2.1",
    "gulp-concat": "2.6.1",
    "gulp-uglify": "3.0.1",
    "gulp-optimize-js": "1.1.0",
    "gulp-sass": "4.0.2",
    "gulp-cssnano": "2.1.3",
    "gulp-autoprefixer": "6.0.0",
    "gulp-svgmin": "2.1.0",
    "browser-sync": "2.26.3"
  },
  "readme": "# Smooth Scroll [![Build Status](https://travis-ci.org/cferdinandi/smooth-scroll.svg)](https://travis-ci.org/cferdinandi/smooth-scroll)\nA lightweight script to animate scrolling to anchor links. Smooth Scroll works great with [Gumshoe](https://github.com/cferdinandi/gumshoe).\n\n**[View the Demo on CodePen &rarr;](https://codepen.io/cferdinandi/pen/wQzrdM)**\n\n[Getting Started](#getting-started) | [Scroll Speed](#scroll-speed) | [Easing Options](#easing-options) | [API](#api) | [What's new?](#whats-new) | [Known Issues](#known-issues) | [Browser Compatibility](#browser-compatibility) | [License](#license)\n\n*__Quick aside:__ you might not need this library. There's [a native CSS way to handle smooth scrolling](https://gomakethings.com/smooth-scrolling-links-with-only-css/) that might fit your needs.*\n\n\n<hr>\n\n### Want to learn how to write your own vanilla JS plugins? Check out my [Vanilla JS Pocket Guides](https://vanillajsguides.com/) or join the [Vanilla JS Academy](https://vanillajsacademy.com) and level-up as a web developer. ðŸš€\n\n<hr>\n\n\n## Getting Started\n\nCompiled and production-ready code can be found in the `dist` directory. The `src` directory contains development code.\n\n### 1. Include Smooth Scroll on your site.\n\nThere are two versions of Smooth Scroll: the standalone version, and one that comes preloaded with polyfills for `closest()`, `requestAnimationFrame()`, and `CustomEvent()`, which are only supported in newer browsers.\n\nIf you're including your own polyfills or don't want to enable this feature for older browsers, use the standalone version. Otherwise, use the version with polyfills.\n\n**Direct Download**\n\nYou can [download the files directly from GitHub](https://github.com/cferdinandi/smooth-scroll/archive/master.zip).\n\n```html\n<script src=\"path/to/smooth-scroll.polyfills.min.js\"></script>\n```\n\n**CDN**\n\nYou can also use the [jsDelivr CDN](https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll/dist/). I recommend linking to a specific version number or version range to prevent major updates from breaking your site. Smooth Scroll uses semantic versioning.\n\n```html\n<!-- Always get the latest version -->\n<!-- Not recommended for production sites! -->\n<script src=\"https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll/dist/smooth-scroll.polyfills.min.js\"></script>\n\n<!-- Get minor updates and patch fixes within a major version -->\n<script src=\"https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll@15/dist/smooth-scroll.polyfills.min.js\"></script>\n\n<!-- Get patch fixes within a minor version -->\n<script src=\"https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll@15.0/dist/smooth-scroll.polyfills.min.js\"></script>\n\n<!-- Get a specific version -->\n<script src=\"https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll@15.0.0/dist/smooth-scroll.polyfills.min.js\"></script>\n```\n\n**NPM**\n\nYou can also use NPM (or your favorite package manager).\n\n```bash\nnpm install smooth-scroll\n```\n\n### 2. Add the markup to your HTML.\n\nNo special markup needed&mdash;just standard anchor links. Give the anchor location an ID just like you normally would.\n\n```html\n<a data-scroll href=\"#bazinga\">Anchor Link</a>\n...\n<div id=\"bazinga\">Bazinga!</div>\n```\n\n***Note:*** *Smooth Scroll does not work with `<a name=\"anchor\"></a>` style anchors. It requires IDs.*\n\n### 3. Initialize Smooth Scroll.\n\nIn the footer of your page, after the content, initialize Smooth Scroll by passing in a selector for the anchor links that should be animated. And that's it, you're done. Nice work!\n\n```html\n<script>\n\tvar scroll = new SmoothScroll('a[href*=\"#\"]');\n</script>\n```\n\n***Note:*** *The `a[href*=\"#\"]` selector will apply Smooth Scroll to all anchor links. You can selectively target links using any other selector(s) you'd like. Smooth Scroll accepts multiple selectors as a comma separated list. Example: `'.js-scroll, [data-scroll], #some-link'`.*\n\n\n\n## Scroll Speed\n\nSmooth Scroll allows you to adjust the speed of your animations with the `speed` option.\n\nThis a number representing the amount of time in milliseconds that it should take to scroll 1000px. Scroll distances shorter than that will take less time, and scroll distances longer than that will take more time. The default is 300ms.\n\n```js\nvar scroll = new SmoothScroll('a[href*=\"#\"]', {\n\tspeed: 300\n});\n```\n\nIf you want all of your animations to take exactly the same amount of time (the value you set for `speed`), set the `speedAsDuration` option to `true`.\n\n```js\n// All animations will take exactly 500ms\nvar scroll = new SmoothScroll('a[href*=\"#\"]', {\n\tspeed: 500,\n\tspeedAsDuration: true\n});\n```\n\n\n## Easing Options\n\nSmooth Scroll comes with about a dozen common easing patterns. [Here's a demo of the different patterns.](https://codepen.io/cferdinandi/pen/jQMGaB)\n\n**Linear**\n*Moves at the same speed from start to finish.*\n\n- `Linear`\n\n\n**Ease-In**\n*Gradually increases in speed.*\n\n- `easeInQuad`\n- `easeInCubic`\n- `easeInQuart`\n- `easeInQuint`\n\n\n**Ease-In-Out**\n*Gradually increases in speed, peaks, and then gradually slows down.*\n\n- `easeInOutQuad`\n- `easeInOutCubic`\n- `easeInOutQuart`\n- `easeInOutQuint`\n\n\n**Ease-Out**\n*Gradually decreases in speed.*\n\n- `easeOutQuad`\n- `easeOutCubic`\n- `easeOutQuart`\n- `easeOutQuint`\n\n\nYou can also pass in your own custom easing pattern [using the `customEasing` option](#global-settings).\n\n```js\nvar scroll = new SmoothScroll('a[href*=\"#\"]', {\n\t// Function. Custom easing pattern\n\t// If this is set to anything other than null, will override the easing option above\n\tcustomEasing: function (time) {\n\n\t\t// return <your formulate with time as a multiplier>\n\n\t\t// Example: easeInOut Quad\n\t\treturn time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time;\n\n\t}\n});\n```\n\n\n\n## API\n\nSmooth Scroll includes smart defaults and works right out of the box. But if you want to customize things, it also has a robust API that provides multiple ways for you to adjust the default options and settings.\n\n### Options and Settings\n\nYou can pass options and callbacks into Smooth Scroll when instantiating.\n\n```javascript\nvar scroll = new SmoothScroll('a[href*=\"#\"]', {\n\n\t// Selectors\n\tignore: '[data-scroll-ignore]', // Selector for links to ignore (must be a valid CSS selector)\n\theader: null, // Selector for fixed headers (must be a valid CSS selector)\n\ttopOnEmptyHash: true, // Scroll to the top of the page for links with href=\"#\"\n\n\t// Speed & Duration\n\tspeed: 500, // Integer. Amount of time in milliseconds it should take to scroll 1000px\n\tspeedAsDuration: false, // If true, use speed as the total duration of the scroll animation\n\tdurationMax: null, // Integer. The maximum amount of time the scroll animation should take\n\tdurationMin: null, // Integer. The minimum amount of time the scroll animation should take\n\tclip: true, // If true, adjust scroll distance to prevent abrupt stops near the bottom of the page\n\toffset: function (anchor, toggle) {\n\n\t\t// Integer or Function returning an integer. How far to offset the scrolling anchor location in pixels\n\t\t// This example is a function, but you could do something as simple as `offset: 25`\n\n\t\t// An example returning different values based on whether the clicked link was in the header nav or not\n\t\tif (toggle.classList.closest('.my-header-nav')) {\n\t\t\treturn 25;\n\t\t} else {\n\t\t\treturn 50;\n\t\t}\n\n\t},\n\n\t// Easing\n\teasing: 'easeInOutCubic', // Easing pattern to use\n\tcustomEasing: function (time) {\n\n\t\t// Function. Custom easing pattern\n\t\t// If this is set to anything other than null, will override the easing option above\n\n\t\t// return <your formulate with time as a multiplier>\n\n\t\t// Example: easeInOut Quad\n\t\treturn time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time;\n\n\t},\n\n\t// History\n\tupdateURL: true, // Update the URL on scroll\n\tpopstate: true, // Animate scrolling with the forward/backward browser buttons (requires updateURL to be true)\n\n\t// Custom Events\n\temitEvents: true // Emit custom events\n\n});\n```\n\n### Custom Events\n\nSmooth Scroll emits three custom events:\n\n- `scrollStart` is emitted when the scrolling animation starts.\n- `scrollStop` is emitted when the scrolling animation stops.\n- `scrollCancel` is emitted if the scrolling animation is canceled.\n\nAll three events are emitted on the `document` element and bubble up. You can listen for them with the `addEventListener()` method. The `event.detail` object includes the `anchor` and `toggle` elements for the animation.\n\n```js\n// Log scroll events\nvar logScrollEvent = function (event) {\n\n\t// The event type\n\tconsole.log('type:', event.type);\n\n\t// The anchor element being scrolled to\n\tconsole.log('anchor:', event.detail.anchor);\n\n\t// The anchor link that triggered the scroll\n\tconsole.log('toggle:', event.detail.toggle);\n\n};\n\n// Listen for scroll events\ndocument.addEventListener('scrollStart', logScrollEvent, false);\ndocument.addEventListener('scrollStop', logScrollEvent, false);\ndocument.addEventListener('scrollCancel', logScrollEvent, false);\n```\n\n### Methods\n\nSmooth Scroll also exposes several public methods.\n\n#### animateScroll()\nAnimate scrolling to an anchor.\n\n```javascript\nvar scroll = new SmoothScroll();\nscroll.animateScroll(\n\tanchor, // Node to scroll to. ex. document.querySelector('#bazinga')\n\ttoggle, // Node that toggles the animation, OR an integer. ex. document.querySelector('#toggle')\n\toptions // Classes and callbacks. Same options as those passed into the init() function.\n);\n```\n\n**Example 1**\n\n```javascript\nvar scroll = new SmoothScroll();\nvar anchor = document.querySelector('#bazinga');\nscroll.animateScroll(anchor);\n```\n\n**Example 2**\n\n```javascript\nvar scroll = new SmoothScroll();\nvar anchor = document.querySelector('#bazinga');\nvar toggle = document.querySelector('#toggle');\nvar options = { speed: 1000, easing: 'easeOutCubic' };\nscroll.animateScroll(anchor, toggle, options);\n```\n\n**Example 3**\n\n```javascript\n// You can optionally pass in a y-position to scroll to as an integer\nvar scroll = new SmoothScroll();\nscroll.animateScroll(750);\n```\n\n#### cancelScroll()\nCancel a scroll-in-progress.\n\n```javascript\nvar scroll = new SmoothScroll();\nscroll.cancelScroll();\n```\n\n***Note:*** *This does not handle focus management. The user will stop in place, and focus will remain on the anchor link that triggered the scroll.*\n\n#### destroy()\nDestroy the current initialization. This is called automatically in the `init` method to remove any existing initializations.\n\n```javascript\nvar scroll = new SmoothScroll();\nscroll.destroy();\n```\n\n\n### Fixed Headers\n\nIf you're using a fixed header, Smooth Scroll will automatically offset scroll distances by the header height. Pass in a valid CSS selector for your fixed header as an option to the `init`.\n\nIf you have multiple fixed headers, pass in the last one in the markup.\n\n```html\n<nav data-scroll-header>\n\t...\n</nav>\n...\n<script>\n\tvar scroll = new SmoothScroll('.some-selector',{\n\t\theader: '[data-scroll-header]'\n\t});\n</script>\n```\n\n\n\n## What's new?\n\nScroll duration now varies based on distance traveled. If you want to maintain the old scroll animation duration behavior, set the `speedAsDuration` option to `true`.\n\n\n\n## Known Issues\n\n### Reduce Motion Settings\n\nThis isn't really an \"issue\" so-much as a question I get a lot.\n\nSmooth Scroll respects [the `Reduce Motion` setting](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) available in certain operating systems. In browsers that surface that setting, Smooth Scroll will not run and will revert to the default \"jump to location\" anchor link behavior.\n\nI've decided to respect user preferences of developer desires here. This is *not* a configurable setting.\n\n### `<body>` styling\n\nIf the `<body>` element has been assigned a height of `100%` or `overflow: hidden`, Smooth Scroll is unable to properly calculate page distances and will not scroll to the right location. The `<body>` element can have a fixed, non-percentage based height (ex. `500px`), or a height of `auto`, and an `overflow` of `visible`.\n\n### Animating from the bottom\n\nAnimated scrolling links at the very bottom of the page (example: a \"scroll to top\" link) will stop animated almost immediately after they start when using certain easing patterns. This is an issue that's been around for a while and I've yet to find a good fix for it. I've found that `easeOut*` easing patterns work as expected, but other patterns can cause issues. [See this discussion for more details.](https://github.com/cferdinandi/smooth-scroll/issues/49)\n\n### Scrolling to an anchor link on another page\n\nThis, unfortunately, cannot be done well.\n\nMost browsers instantly jump you to the anchor location when you load a page. You could use `scrollTo(0, 0)` to pull users back up to the top, and then manually use the `animateScroll()` method, but in my experience, it results in a visible jump on the page that's a worse experience than the default browser behavior.\n\n\n\n## Browser Compatibility\n\nSmooth Scroll works in all modern browsers, and IE 9 and above.\n\nSmooth Scroll is built with modern JavaScript APIs, and uses progressive enhancement. If the JavaScript file fails to load, or if your site is viewed on older and less capable browsers, anchor links will jump the way they normally would.\n\n*__Note:__ Smooth Scroll will not run&mdash;even in supported browsers&mdash;if users have `Reduce Motion` enabled. [Learn more in the \"Known Issues\" section.](#reduce-motion-settings)*\n\n### Polyfills\n\nSupport back to IE9 requires polyfills for `closest()`, `requestAnimationFrame()`, and `CustomEvent()`. Without them, support starts with Edge.\n\nUse the included polyfills version of Smooth Scroll, or include your own.\n\n\n\n## License\n\nThe code is available under the [MIT License](LICENSE.md).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cferdinandi/smooth-scroll/issues"
  },
  "homepage": "https://github.com/cferdinandi/smooth-scroll",
  "_id": "smooth-scroll@16.1.3",
  "_shasum": "c5b68194b4186173f9f61065103ae4e26ce36885",
  "_from": "smooth-scroll@",
  "_resolved": "https://registry.npmjs.org/smooth-scroll/-/smooth-scroll-16.1.3.tgz"
}
